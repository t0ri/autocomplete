!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).prefixtree=e()}(this,(function(){"use strict";const t=require("./prefixtreenode.js");return class{constructor(e){this.root=new t(""),this.stringCount=0,this.nodeCount=0,e&&e.forEach(t=>this.insert(t))}isEmpty(){return 0===this.stringCount}contains(t){const e=this.findNode(t)[0];return!(!e||!e.terminal)}insert(e){if(!this.contains(e)){let i=this.root;[...e].forEach(e=>{i.hasChild(e)||(i.addChild(e,new t(e)),this.nodeCount+=1),i=i.getChild(e)}),this.stringCount+=1,i.terminal=!0}}findNode(t){if(0===t.length)return this.root,0;let e=this.root,i=0;return[...t].forEach(n=>e.hasChild(n)?(e=e.getChild(n),i!==t.length||e.terminal?void(i+=1):[e,i]):i),[e,i]}complete(t=""){if(""===t)return this.strings();const e=[],i=this.findNode(t)[0];return!this.isEmpty()&&i&&this.traverse(i,t,e.push.bind(e)),e}strings(){const t=[];return this.traverse(this.root,"",t.push.bind(t)),t}traverse(t,e,i){t.terminal&&i(e),Object.keys(t.children).forEach(n=>{const r=t.getChild(n);this.traverse(r,e+n,i)})}}}));
