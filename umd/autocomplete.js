!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).autocomplete=e()}(this,(function(){"use strict";class t{constructor(t){this.character=t,this.children={},this.terminal=!1}isTerminal(){return this.terminal}childrenCount(){return Object.keys(this.children).length}hasChild(t){return t in this.children}getChild(t){if(this.hasChild(t))return this.children[t];throw new Error("No child exists for character "+t)}addChild(t,e){if(this.hasChild(t))throw new Error("Child already exists for character "+t);this.children[t]=e}}class e{constructor(e){this.root=new t(""),this.stringCount=0,this.nodeCount=0,e&&e.forEach(t=>this.insert(t))}isEmpty(){return 0===this.stringCount}contains(t){const e=this.findNode(t)[0];return!(!e||!e.terminal)}insert(e){if(!this.contains(e)){let i=this.root;[...e].forEach(e=>{i.hasChild(e)||(i.addChild(e,new t(e)),this.nodeCount+=1),i=i.getChild(e)}),this.stringCount+=1,i.terminal=!0}}findNode(t){if(0===t.length)return this.root,0;let e=this.root,i=0;return[...t].forEach(r=>e.hasChild(r)?(e=e.getChild(r),i!==t.length||e.terminal?void(i+=1):[e,i]):i),[e,i]}complete(t=""){if(""===t)return this.strings();const e=[],i=this.findNode(t)[0];return!this.isEmpty()&&i&&this.traverse(i,t,e.push.bind(e)),e}strings(){const t=[];return this.traverse(this.root,"",t.push.bind(t)),t}traverse(t,e,i){t.terminal&&i(e),Object.keys(t.children).forEach(r=>{const s=t.getChild(r);this.traverse(s,e+r,i)})}}return class{constructor(t,i,r=!0){this.trie=new e,this.autocompleteCount=i,this.ignoreCasing=r,t&&this.addEntries(t)}get entries(){return this.trie.stringCount}get entriesCharCount(){return this.trie.nodeCount}autocomplete(t=""){return this.ignoreCasing&&(t=t.toLowerCase()),this.autocompleteCount?this.trie.complete(t).slice(0,this.autocompleteCount):this.trie.complete(t)}addEntry(t){t&&(this.ignoreCasing?this.trie.insert(t.toLowerCase()):this.trie.insert(t))}addEntries(t){t&&(this.ignoreCasing?t.forEach(t=>{"string"==typeof t&&this.addEntry(t.toLowerCase())}):t.forEach(t=>{this.addEntry(t)}))}}}));
