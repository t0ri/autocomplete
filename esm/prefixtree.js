const t=require("./prefixtreenode.js");export default class{constructor(i){this.root=new t(""),this.stringCount=0,this.nodeCount=0,i&&i.forEach(t=>this.insert(t))}isEmpty(){return 0===this.stringCount}contains(t){const i=this.findNode(t)[0];return!(!i||!i.terminal)}insert(i){if(!this.contains(i)){let r=this.root;[...i].forEach(i=>{r.hasChild(i)||(r.addChild(i,new t(i)),this.nodeCount+=1),r=r.getChild(i)}),this.stringCount+=1,r.terminal=!0}}findNode(t){if(0===t.length)return this.root,0;let i=this.root,r=0;return[...t].forEach(s=>i.hasChild(s)?(i=i.getChild(s),r!==t.length||i.terminal?void(r+=1):[i,r]):r),[i,r]}complete(t=""){if(""===t)return this.strings();const i=[],r=this.findNode(t)[0];return!this.isEmpty()&&r&&this.traverse(r,t,i.push.bind(i)),i}strings(){const t=[];return this.traverse(this.root,"",t.push.bind(t)),t}traverse(t,i,r){t.terminal&&r(i),Object.keys(t.children).forEach(s=>{const e=t.getChild(s);this.traverse(e,i+s,r)})}}
