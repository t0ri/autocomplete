module.exports.PrefixTreeNode=class{constructor(t){this.character=t,this.children={},this.terminal=!1}isTerminal(){return this.terminal}childrenCount(){return Object.keys(this.children).length}hasChild(t){return t in this.children}getChild(t){if(this.hasChild(t))return this.children[t];throw new Error("No child exists for character "+t)}addChild(t,r){if(this.hasChild(t))throw new Error("Child already exists for character "+t);this.children[t]=r}};var t=Object.freeze({__proto__:null});module.exports.PrefixTree=class{constructor(r){this.root=new t(""),this.stringCount=0,this.nodeCount=0,r&&r.forEach(t=>this.insert(t))}isEmpty(){return 0===this.stringCount}contains(t){const r=this.findNode(t)[0];return!(!r||!r.terminal)}insert(r){if(!this.contains(r)){let i=this.root;[...r].forEach(r=>{i.hasChild(r)||(i.addChild(r,new t(r)),this.nodeCount+=1),i=i.getChild(r)}),this.stringCount+=1,i.terminal=!0}}findNode(t){if(0===t.length)return this.root,0;let r=this.root,i=0;return[...t].forEach(e=>r.hasChild(e)?(r=r.getChild(e),i!==t.length||r.terminal?void(i+=1):[r,i]):i),[r,i]}complete(t=""){if(""===t)return this.strings();const r=[],i=this.findNode(t)[0];return!this.isEmpty()&&i&&this.traverse(i,t,r.push.bind(r)),r}strings(){const t=[];return this.traverse(this.root,"",t.push.bind(t)),t}traverse(t,r,i){t.terminal&&i(r),Object.keys(t.children).forEach(e=>{const s=t.getChild(e);this.traverse(s,r+e,i)})}};
